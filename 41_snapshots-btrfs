#! /usr/bin/env bash
#
#
#################################################################################################################################################
# Written by: Antynea																#
#																		#
# Purpose: Include btrfs snapshots at boot options (grub-menu).											#
#																		#
# What this script does:															#
# - Automatically List snapshots existing on root partition (btrfs).										#
# - Automatically Detect if "/boot" is in separate partition.											#
# - Automatically Detect kernel, initramfs and intel microcode in "/boot" directory on snapshots. (For custon name, see below.)			#
# - Automatically Create corresponding "menuentry" in grub.cfg , which ensures a very easy rollback.						#
#																		#
# How to use it:																#
# - Add this lines to /etc/default/grub:													#
#																		#
# * GRUB_BTRFS_SUBMENUNAME="ArchLinux Snapshots" 												#
#	(Name appearing in the Grub menu.)													#
# * GRUB_BTRFS_PREFIXENTRY="Snapshot:"        		   											#
#	(Add a name ahead your snapshots entries in the Grub menu.) 										#
# * GRUB_BTRFS_DISPLAY_PATH_SNAPSHOT="true"													#
#	(Show full path snapshot or only name in the Grub menu)											#
# * GRUB_BTRFS_TITLE_FORMAT="p/d/n"														#
#	(Custom title, shows/hides p"prefix" d"date" n"name" in the Grub menu, separator "/", custom order available)				#
# * GRUB_BTRFS_LIMIT="100"															#
#	(Limit the number of snapshots populated in the GRUB menu.)										#
# * GRUB_BTRFS_SUBVOLUME_SORT="descending"													#
#	(Sort the found subvolumes by newest first ("descending") or oldest first ("ascending").						#
#	If "ascending" is chosen then the $GRUB_BTRFS_LIMIT oldest subvolumes will populate the menu.)						#
# * GRUB_BTRFS_SHOW_SNAPSHOTS_FOUND="true"													#
#	(Show snapshots found during run "grub-mkconfig")											#
# * GRUB_BTRFS_SHOW_TOTAL_SNAPSHOTS_FOUND="true"												#
#	(Show Total of snapshots found during run "grub-mkconfig")										#
# * GRUB_BTRFS_NKERNEL=("vmlinuz-linux") 		 											#
#	(Use only if you have custom kernel name or auto-detect failed.)									#
# * GRUB_BTRFS_NINIT=("initramfs-linux.img" "initramfs-linux-fallback.img")									#
#	(Use only if you have custom initramfs name or auto-detect failed.)									#
# * GRUB_BTRFS_INTEL_UCODE=("intel-ucode.img") 													#
#	(Use only if you have custom intel-ucode or auto-detect failed.)		    							#
# * GRUB_BTRFS_IGNORE_SPECIFIC_PATH=("var/lib/docker" "nosapshot")										#
#	(Ignore specific path during run "grub-mkconfig")											#
# * GRUB_BTRFS_CREATE_ONLY_HARMONIZED_ENTRIES="false"												#
#	(Create entries with matching version number instead of all possible combinations of kernel and initramfs)				#
#																		#
# - Generate grub.cfg (on Archlinux use grub-mkconfig -o /boot/grub/grub.cfg)									#
#																		#
# - grub-btrfs automatically generates snapshots entries.											#
# - You will see it appear different entries (e.g : Snapshot: [2014-02-12 11:24:37] my snapshot name overkill)					#
#																		#
#																		#
# To do:																	#
#																		#
#	* Display name of microcode in menuentry when available											#
#																		#
#################################################################################################################################################

set -e

#prefix="/usr"
#exec_prefix="${prefix}"
datarootdir="/usr/share"
#datadir="${datarootdir}"
sysconfdir="/etc"

. "${datarootdir}/grub/grub-mkconfig_lib"
. "${sysconfdir}/default/grub"

######################################
### Variables in /etc/default/grub ###
######################################
## current distro string
distro_string="Arch Linux"
## Submenu name
submenuname=${GRUB_BTRFS_SUBMENUNAME:-"${distro_string}"}
## Prefix entry
prefixentry=${GRUB_BTRFS_PREFIXENTRY:-"Snapshot:"}
## Show full path snapshot or only name
path_snapshot=${GRUB_BTRFS_DISPLAY_PATH_SNAPSHOT:-"true"}
## Title format
title_format=${GRUB_BTRFS_TITLE_FORMAT:-"p/d/n"}
## Kernel(s) name(s)
nkernel=("${GRUB_BTRFS_NKERNEL[@]}")
## Initramfs name(s)
ninit=("${GRUB_BTRFS_NINIT[@]}")
## Microcode(s) name(s)
microcode=("${GRUB_BTRFS_INTEL_UCODE[@]}")
## Limit to show in the Grub menu
limit_snap_show="${GRUB_BTRFS_LIMIT:-100}"
## How to sort snapshots list
snap_list_sort=${GRUB_BTRFS_SUBVOLUME_SORT:-"descending"}
case "${snap_list_sort}" in
    ascending)          btrfssubvolsort=("--sort=+rootid");;
    *)                  btrfssubvolsort=("--sort=-rootid")
esac
## Show snapshots found during run "grub-mkconfig"
show_snap_found=${GRUB_BTRFS_SHOW_SNAPSHOTS_FOUND:-"true"}
## Show Total of snapshots found during run "grub-mkconfig"
show_total_snap_found=${GRUB_BTRFS_SHOW_TOTAL_SNAPSHOTS_FOUND:-"true"}
## Ignore specific path during run "grub-mkconfig"
ignore_specific_path=("${GRUB_BTRFS_IGNORE_SPECIFIC_PATH[@]}")
## create only entries with harmonized version numbers
harmonized_entries=${GRUB_BTRFS_CREATE_ONLY_HARMONIZED_ENTRIES:-"false"}


########################
### variables script ###
########################
## Internationalization (default : english)
export TEXTDOMAIN=grub-btrfs-git
export TEXTDOMAINDIR="/usr/share/locale"

## hints string
hs_boot=$(${grub_probe} --target="hints_string" "/boot" 2>/dev/null)
## UUID of the boot partition
boot_uuid=$(${grub_probe} --target="fs_uuid" "/boot" 2>/dev/null)
## Type filesystem of boot partition
boot_fs=$(${grub_probe} --target="fs" "/boot" 2>/dev/null)
## UUID of the root partition
root_uuid=$(${grub_probe} "/" --target="fs_uuid" 2>/dev/null)
## Parameters passed to the kernel
kernel_parameters="$GRUB_CMDLINE_LINUX $GRUB_CMDLINE_LINUX_DEFAULT"
## Mount point location
gbgmp=$(mktemp -d)
## Class for theme
CLASS="--class snapshots --class gnu-linux --class gnu --class os"
## save IFS
oldIFS=$IFS
## boot_dir (auto-detect if /boot is separate partition or not)
boot_dir()
{
	boot_dir="$gbgmp/$snap_dir_name/boot"
	[[ "$root_uuid" != "$boot_uuid" ]] && boot_dir="/boot"
	echo "$boot_dir"
}


##############
### Script ###
##############

### BEGIN auto detect ###

## menu entries
snapshots_entry()
{
## \" required for snap,kernels,init,microcode with space in their name
	echo "	submenu '"${title_menu[*]}"' {
		submenu '---> "${title_menu[*]}" <---' { echo }
	"
	for k in "${name_kernel[@]}"; do
		for i in "${name_initramfs[@]}"; do
			for u in "${name_microcode[@]}"; do
			echo "\
		menuentry '"${k}" & "${i}"' ${CLASS} "\$menuentry_id_option" 'gnulinux-snapshots-$boot_uuid'{
			$(save_default_entry)
			if [ x\$feature_all_video_module = xy ]; then
				insmod all_video
			fi
			set gfxpayload=keep
			insmod ${boot_fs}
			if [ x\$feature_platform_search_hint = xy ]; then
				search --no-floppy --fs-uuid  --set=root ${hs_boot} ${boot_uuid}
			else
				search --no-floppy --fs-uuid  --set=root ${boot_uuid}
			fi
			echo 'Loading Snapshot: "${snap_date_time}" "${snap_dir_name}"'
			echo 'Loading Kernel: "${k}" ...'
			linux \"${boot_dir_real_path}/"${k}"\" root=UUID=${root_uuid} rw rootflags=subvol=\""${snap_dir_name}"\" ${kernel_parameters}\
			"
			if [ -f "$(boot_dir)"/"${u}" ] ; then
				echo "\
			echo 'Loading Microcode & Initramfs: "${u}" "${i}" ...'
			initrd \"${boot_dir_real_path}/"${u}"\" \"${boot_dir_real_path}/"${i}"\""
			else
				echo "\
			echo 'Loading Initramfs: "${i}" ...'
			initrd \"${boot_dir_real_path}/"${i}"\""
			fi
		echo "		}"
			done
		done
	done
	echo "	}"
}

harmonized_snapshots_entry()
{
## \" required for snap,kernels,init,microcode with space in their name
	echo "	submenu '"${title_menu[*]}"' {
		submenu '---> "${title_menu[*]}" <---' { echo }
	"
	for k in "${name_kernel[@]}"; do
		version=${k#vmlinuz-}
		
		i=""
		if [[ -e "$(boot_dir)"/initramfs-${version} ]]; then
			i=initramfs-${version}
		else
			if [[ -e "$(boot_dir)"/initrd.img-${version} ]]; then
				i=initrd.img-${version}
			fi
		fi
		
		u=""
		if [ -f "$(boot_dir)"/intel-ucode.img ]; then
			u=intel-ucode.img
		fi
		
		
		echo "\
		menuentry '"${k}"' ${CLASS} "\$menuentry_id_option" 'gnulinux-snapshots-$boot_uuid'{
			$(save_default_entry)
			if [ x\$feature_all_video_module = xy ]; then
				insmod all_video
			fi
			set gfxpayload=keep
			insmod ${boot_fs}
			if [ x\$feature_platform_search_hint = xy ]; then
				search --no-floppy --fs-uuid  --set=root ${hs_boot} ${boot_uuid}
			else
				search --no-floppy --fs-uuid  --set=root ${boot_uuid}
			fi
			echo 'Loading Snapshot: "${snap_date_time}" "${snap_dir_name}"'
			echo 'Loading Kernel: "${k}" ...'
			linux \"${boot_dir_real_path}/"${k}"\" root=UUID=${root_uuid} rw rootflags=subvol=\""${snap_dir_name}"\" ${kernel_parameters}\
			"
			if [[ ! -z ${i} ]]; then
				if [ ! -z ${u} ] ; then
					echo "\
			echo 'Loading Microcode & Initramfs: "${u}" "${i}" ...'
			initrd \"${boot_dir_real_path}/"${u}"\" \"${boot_dir_real_path}/"${i}"\""
				else
					echo "\
			echo 'Loading Initramfs: "${i}" ...'
			initrd \"${boot_dir_real_path}/"${i}"\""
				fi
			fi
		echo "		}"
	done
	echo "	}"
}

## List of snapshots on filesystem
snapshot_list()
{
	for snap in $(btrfs subvolume list -sa "${btrfssubvolsort}" /); do
		IFS=$oldIFS
		snap=($snap)
		local snap_path_name=${snap[@]:13:${#snap[@]}}
		# Discard deleted snapshots
		if [ "$snap_path_name" = "DELETED" ]; then continue; fi
		[[ ${snap_path_name%%"/"*} == "<FS_TREE>" ]] && snap_path_name=${snap_path_name#*"/"}
		echo ${snap[@]:10:2} ${snap_path_name}
	done
}

# Get the distro name on filesystem
get_distro()
{
	
	if [ -e $1/etc/issue ]; then
		#Remove unnecessary trailing chars.
		DIST=$(cat $1/etc/issue | sed s'/\\.//'g | sed s'/[()]//'g)
	    
	   fi
	   
	echo $DIST

}

## Detect kernels in "/boot"
detect_kernel()
{
	## Arch original kernel (auto-detect)
	for akernel in `ls "$(boot_dir)"/{vmlinuz,vmlinux,linux}-* 2>/dev/null` ; do 
		list_kernel+=("$akernel")
	done

	## Custom name kernel in GRUB_BTRFS_NKERNEL
	if [ ! -z "${nkernel}" ] && [ "$1" == "${distro_string}" ] ; then
		for ckernel in "${nkernel[@]}" ; do
			[[ ! -f /"$(boot_dir)"/"${ckernel}" ]] && continue;
			list_kernel+=("$ckernel")
		done
	fi
}

## Detect initramfs in "/boot"
detect_initramfs()
{
	## Arch original initramfs (auto-detect)
	for ainitramfs in `ls "$(boot_dir)"/{initrd.img,initramfs}-* 2>/dev/null` ; do 
	     
		list_initramfs+=("$ainitramfs")
	done
	
	## Custom name initramfs in GRUB_BTRFS_NINIT
	if [ ! -z "$ninit" ] && [ "$1" == "${distro_string}" ] ; then
		for cinitramfs in "${ninit[@]}" ; do
			[[ ! -f /"$(boot_dir)"/"${cinitramfs}" ]] && continue;
			list_initramfs+=("$cinitramfs")
		done
	fi
}

## Detect microcode in "/boot"
detect_microcode()
{
	## Arch original intel microcode
	for aucode in "$(boot_dir)"/intel-ucode.img ; do
		list_ucode+=("$aucode")
	done

	## Custom name microcode in GRUB_BTRFS_INTEL_UCODE
	if [ ! -z "$microcode" ] ; then
		for cucode in "${microcode[@]}" ; do
			[[ ! -f /"$(boot_dir)"/"${cucode}" ]] && continue
			list_ucode+=("$cucode")
		done
	fi
}

## Show full path snapshot or only name
path_snapshot()
{
	case "${path_snapshot}" in
		true) name_snapshot=("${snap_dir_name}");;
		*) name_snapshot=("${snap_dir_name#*"/"}")
	esac
}

## Title format in grub-menu
title_format()
{
	case "${title_format}" in
		p/d/n) 	title_menu=("${prefixentry}" "${snap_date_time}" "${name_snapshot}");;
		p/n/d) 	title_menu=("${prefixentry}" "${snap_dir_name}" "${snap_date_time}");;
		p/d) 	title_menu=("${prefixentry}" "${snap_date_time}");;
		p/n) 	title_menu=("${prefixentry}" "${snap_dir_name}");;
		d/n) 	title_menu=("${snap_date_time}" "${snap_dir_name}");;
		n/d) 	title_menu=("${snap_dir_name}" "${snap_date_time}");;
		p) 	title_menu=("${prefixentry}");;
		d)	title_menu=("${snap_date_time}");;
		n)	title_menu=("${snap_dir_name}");;
		*)	gettext_printf $"# Warning: GRUB_BTRFS_TITLE_FORMAT=${title_format}, syntax error \n" >&2
	esac
}

## List of kernels, initramfs and microcode in snapshots
list_kernels_initramfs()
{
	#Keep track of the previous distro visited in the loop.
	PREV_DISTRO="none"

	IFS=$'\n'
	count_limit_snap=0
	for item in $(snapshot_list); do
	
		### fix: limit_snap_show=0
		[[ ${limit_snap_show} -le 0 ]] && break;
		IFS=$oldIFS
		item=($item)
		snap_dir_name=${item[@]:2:${#item[@]}}
		
		distro="$(get_distro "${gbgmp}"/"${snap_dir_name}")"
			
		if [ "${distro}" == "${distro_string}" ]; then
			CURR_DISTRO="${submenuname}"
		else
			CURR_DISTRO="${distro}"
		fi
		
		#unset the variable
		unset distro
		
		#### Create a menu in grub
		
		if [ "${PREV_DISTRO}" == "none" ]; then
			echo "submenu '${CURR_DISTRO} Snapshots' {"
			PREV_DISTRO=$CURR_DISTRO
		fi
		
		if [ "${PREV_DISTRO}" != "${CURR_DISTRO}" ]; then
			echo "}"
			echo "submenu '${CURR_DISTRO} Snapshots' {"
		fi
		
		### ignore specific path during run "grub-mkconfig"
		if [ ! -z "${ignore_specific_path}" ] ; then
			for isp in ${ignore_specific_path[@]} ; do
				[[ "${gbgmp}"/"${snap_dir_name}" == "${gbgmp}"/"${isp}"/* ]] && continue 2;
			done
		fi
		### detect if /boot directory exist
		[[ ! -d "$gbgmp/$snap_dir_name/boot" ]] && continue;
		### show snapshot found during run "grub-mkconfig"
		snap_date_time=${item[@]:0:2}
		if [[ "${show_snap_found}" = "true" ]]; then
		gettext_printf $"# Found Snapshot: %s\n" "${snap_date_time} ${snap_dir_name}" >&2 ;
		fi
		### Kernel (auto-detect + custom kernel)
		unset list_kernel
		detect_kernel CURR_DISTRO
		name_kernel=("${list_kernel[@]##*"/"}")
		# echo "kernel = ${name_kernel[*]}"
		
		if [[ "${harmonized_entries}" = "false" ]]; then
			### Initramfs (autodetect + custom initramfs)
			unset list_initramfs
			detect_initramfs CURR_DISTRO
			name_initramfs=("${list_initramfs[@]##*"/"}")
			# echo "initramfs = ${name_initramfs[*]}"
			### microcode (auto-detect + custom microcode)
			unset list_ucode
			detect_microcode
			name_microcode=("${list_ucode[@]##*"/"}")
			# echo "ucode = ${name_microcode[*]}"
		fi
		### real path to boot
		boot_dir_real_path="$(make_system_path_relative_to_its_root "$(boot_dir)")"
		### Create menu entries
		## name snpashot
		path_snapshot
		## title menu custom
		title_format
		# echo "${title_menu[*]}"
		if [[ "${harmonized_entries}" = "false" ]]; then
		
			#check if the distro running isn't arch so we disable multi-initrd entries.
			if [ "${CURR_DISTRO}" == "${distro_string}" ]; then
				snapshots_entry
			else
				harmonized_snapshots_entry
			fi
			
		else
			harmonized_snapshots_entry
		fi
		### Limit snapshots found during run "grub-mkconfig"
	        count_limit_snap=$((1+$count_limit_snap))
	        [[ $count_limit_snap -ge $limit_snap_show ]] && break;
	    
	    PREV_DISTRO=$CURR_DISTRO
	done
	
	#terminate the last submenu entry
	echo "}"
	
	IFS=$oldIFS
}
### END auto detect ###

### Start ###
	gettext_printf "###### - Grub-btrfs: Auto-detect Start - ######\n" >&2 ;
	### create mount point and mounts
	[[ ! -d $gbgmp ]] && mkdir -p $gbgmp
	mount -o subvolid=0 /dev/disk/by-uuid/$root_uuid $gbgmp/

	### Create a menu in grub
	list_kernels_initramfs ;

	## show total found snapshots
	if [[ "${show_total_snap_found}" = "true" ]]; then
	gettext_printf "# found ${count_limit_snap} snapshot(s)\n" >&2 ;
	fi
	## if no snapshot found, show a warning 
	if [[ "${count_limit_snap}" = "0" ]]; then
		echo " submenu '---> "No snapshot found : Press ESC to return previous menu" <---' { echo } ";
		gettext_printf "# No snapshot found \n# make sure you have at least one snapshot \n# or please file a bug report at \"https://github.com/Antynea/grub-btrfs\"\n" >&2 ;
	fi
	
	## unmount mount point
	umount $gbgmp
	gettext_printf "###### - Grub-btrfs: Auto-detect End   - ######\n" >&2 ;
### End ###
